//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: news_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Demo_NewsServicegetNewsCall: ClientCallUnary {}

fileprivate final class Demo_NewsServicegetNewsCallBase: ClientCallUnaryBase<Demo_NewsRequest, Demo_NewsResponse>, Demo_NewsServicegetNewsCall {
  override class var method: String { return "/demo.NewsService/getNews" }
}

internal protocol Demo_NewsServicesubscribeCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Demo_News?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Demo_News?>) -> Void) throws
}

internal extension Demo_NewsServicesubscribeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Demo_News? { return try self._receive(timeout: timeout) }
}

fileprivate final class Demo_NewsServicesubscribeCallBase: ClientCallServerStreamingBase<Demo_SubscribeRequest, Demo_News>, Demo_NewsServicesubscribeCall {
  override class var method: String { return "/demo.NewsService/subscribe" }
}

internal protocol Demo_NewsServicepostNewsCall: ClientCallUnary {}

fileprivate final class Demo_NewsServicepostNewsCallBase: ClientCallUnaryBase<Demo_News, Demo_News>, Demo_NewsServicepostNewsCall {
  override class var method: String { return "/demo.NewsService/postNews" }
}


/// Instantiate Demo_NewsServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Demo_NewsServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getNews(_ request: Demo_NewsRequest) throws -> Demo_NewsResponse
  /// Asynchronous. Unary.
  func getNews(_ request: Demo_NewsRequest, completion: @escaping (Demo_NewsResponse?, CallResult) -> Void) throws -> Demo_NewsServicegetNewsCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribe(_ request: Demo_SubscribeRequest, completion: ((CallResult) -> Void)?) throws -> Demo_NewsServicesubscribeCall

  /// Synchronous. Unary.
  func postNews(_ request: Demo_News) throws -> Demo_News
  /// Asynchronous. Unary.
  func postNews(_ request: Demo_News, completion: @escaping (Demo_News?, CallResult) -> Void) throws -> Demo_NewsServicepostNewsCall

}

internal final class Demo_NewsServiceServiceClient: ServiceClientBase, Demo_NewsServiceService {
  /// Synchronous. Unary.
  internal func getNews(_ request: Demo_NewsRequest) throws -> Demo_NewsResponse {
    return try Demo_NewsServicegetNewsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getNews(_ request: Demo_NewsRequest, completion: @escaping (Demo_NewsResponse?, CallResult) -> Void) throws -> Demo_NewsServicegetNewsCall {
    return try Demo_NewsServicegetNewsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribe(_ request: Demo_SubscribeRequest, completion: ((CallResult) -> Void)?) throws -> Demo_NewsServicesubscribeCall {
    return try Demo_NewsServicesubscribeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func postNews(_ request: Demo_News) throws -> Demo_News {
    return try Demo_NewsServicepostNewsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func postNews(_ request: Demo_News, completion: @escaping (Demo_News?, CallResult) -> Void) throws -> Demo_NewsServicepostNewsCall {
    return try Demo_NewsServicepostNewsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Demo_NewsServiceProvider: ServiceProvider {
  func getNews(request: Demo_NewsRequest, session: Demo_NewsServicegetNewsSession) throws -> Demo_NewsResponse
  func subscribe(request: Demo_SubscribeRequest, session: Demo_NewsServicesubscribeSession) throws -> ServerStatus?
  func postNews(request: Demo_News, session: Demo_NewsServicepostNewsSession) throws -> Demo_News
}

extension Demo_NewsServiceProvider {
  internal var serviceName: String { return "demo.NewsService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/demo.NewsService/getNews":
      return try Demo_NewsServicegetNewsSessionBase(
        handler: handler,
        providerBlock: { try self.getNews(request: $0, session: $1 as! Demo_NewsServicegetNewsSessionBase) })
          .run()
    case "/demo.NewsService/subscribe":
      return try Demo_NewsServicesubscribeSessionBase(
        handler: handler,
        providerBlock: { try self.subscribe(request: $0, session: $1 as! Demo_NewsServicesubscribeSessionBase) })
          .run()
    case "/demo.NewsService/postNews":
      return try Demo_NewsServicepostNewsSessionBase(
        handler: handler,
        providerBlock: { try self.postNews(request: $0, session: $1 as! Demo_NewsServicepostNewsSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Demo_NewsServicegetNewsSession: ServerSessionUnary {}

fileprivate final class Demo_NewsServicegetNewsSessionBase: ServerSessionUnaryBase<Demo_NewsRequest, Demo_NewsResponse>, Demo_NewsServicegetNewsSession {}

internal protocol Demo_NewsServicesubscribeSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Demo_News, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Demo_News, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Demo_NewsServicesubscribeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Demo_News, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Demo_NewsServicesubscribeSessionBase: ServerSessionServerStreamingBase<Demo_SubscribeRequest, Demo_News>, Demo_NewsServicesubscribeSession {}

internal protocol Demo_NewsServicepostNewsSession: ServerSessionUnary {}

fileprivate final class Demo_NewsServicepostNewsSessionBase: ServerSessionUnaryBase<Demo_News, Demo_News>, Demo_NewsServicepostNewsSession {}

