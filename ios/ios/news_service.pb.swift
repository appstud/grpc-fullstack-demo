// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: news_service.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Fr_Fbernard_Grpc_News_Topic: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case tech // = 0
  case sport // = 1
  case economy // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .tech
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tech
    case 1: self = .sport
    case 2: self = .economy
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .tech: return 0
    case .sport: return 1
    case .economy: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Fr_Fbernard_Grpc_News_Topic: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Fr_Fbernard_Grpc_News_Topic] = [
    .tech,
    .sport,
    .economy,
  ]
}

#endif  // swift(>=4.2)

struct Fr_Fbernard_Grpc_News_NewsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var topic: Fr_Fbernard_Grpc_News_Topic = .tech

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Fr_Fbernard_Grpc_News_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var topic: Fr_Fbernard_Grpc_News_Topic = .tech

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Fr_Fbernard_Grpc_News_NewsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var news: [Fr_Fbernard_Grpc_News_News] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Fr_Fbernard_Grpc_News_News {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var newsID: String = String()

  var title: String = String()

  var imageURL: String = String()

  var description_p: String = String()

  var topic: Fr_Fbernard_Grpc_News_Topic = .tech

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fr.fbernard.grpc.news"

extension Fr_Fbernard_Grpc_News_Topic: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TECH"),
    1: .same(proto: "SPORT"),
    2: .same(proto: "ECONOMY"),
  ]
}

extension Fr_Fbernard_Grpc_News_NewsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NewsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.topic)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.topic != .tech {
      try visitor.visitSingularEnumField(value: self.topic, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fr_Fbernard_Grpc_News_NewsRequest, rhs: Fr_Fbernard_Grpc_News_NewsRequest) -> Bool {
    if lhs.topic != rhs.topic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fr_Fbernard_Grpc_News_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.topic)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.topic != .tech {
      try visitor.visitSingularEnumField(value: self.topic, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fr_Fbernard_Grpc_News_SubscribeRequest, rhs: Fr_Fbernard_Grpc_News_SubscribeRequest) -> Bool {
    if lhs.topic != rhs.topic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fr_Fbernard_Grpc_News_NewsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NewsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "news"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.news)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.news.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.news, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fr_Fbernard_Grpc_News_NewsResponse, rhs: Fr_Fbernard_Grpc_News_NewsResponse) -> Bool {
    if lhs.news != rhs.news {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Fr_Fbernard_Grpc_News_News: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".News"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "newsId"),
    2: .same(proto: "title"),
    3: .same(proto: "imageUrl"),
    4: .same(proto: "description"),
    5: .same(proto: "topic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.newsID)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.imageURL)
      case 4: try decoder.decodeSingularStringField(value: &self.description_p)
      case 5: try decoder.decodeSingularEnumField(value: &self.topic)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.newsID.isEmpty {
      try visitor.visitSingularStringField(value: self.newsID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if self.topic != .tech {
      try visitor.visitSingularEnumField(value: self.topic, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Fr_Fbernard_Grpc_News_News, rhs: Fr_Fbernard_Grpc_News_News) -> Bool {
    if lhs.newsID != rhs.newsID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.topic != rhs.topic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
