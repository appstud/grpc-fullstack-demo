// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news_service.proto

package demo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic int32

const (
	Topic_TECH    Topic = 0
	Topic_SPORT   Topic = 1
	Topic_ECONOMY Topic = 2
)

var Topic_name = map[int32]string{
	0: "TECH",
	1: "SPORT",
	2: "ECONOMY",
}

var Topic_value = map[string]int32{
	"TECH":    0,
	"SPORT":   1,
	"ECONOMY": 2,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}

func (Topic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8ac5cc3c062ad010, []int{0}
}

type NewsRequest struct {
	Topic                Topic    `protobuf:"varint,1,opt,name=topic,proto3,enum=demo.Topic" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsRequest) Reset()         { *m = NewsRequest{} }
func (m *NewsRequest) String() string { return proto.CompactTextString(m) }
func (*NewsRequest) ProtoMessage()    {}
func (*NewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac5cc3c062ad010, []int{0}
}
func (m *NewsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsRequest.Unmarshal(m, b)
}
func (m *NewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsRequest.Marshal(b, m, deterministic)
}
func (m *NewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsRequest.Merge(m, src)
}
func (m *NewsRequest) XXX_Size() int {
	return xxx_messageInfo_NewsRequest.Size(m)
}
func (m *NewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewsRequest proto.InternalMessageInfo

func (m *NewsRequest) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_TECH
}

type SubscribeRequest struct {
	Topic                Topic    `protobuf:"varint,1,opt,name=topic,proto3,enum=demo.Topic" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac5cc3c062ad010, []int{1}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_TECH
}

type NewsResponse struct {
	News                 []*News  `protobuf:"bytes,1,rep,name=news,proto3" json:"news,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsResponse) Reset()         { *m = NewsResponse{} }
func (m *NewsResponse) String() string { return proto.CompactTextString(m) }
func (*NewsResponse) ProtoMessage()    {}
func (*NewsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac5cc3c062ad010, []int{2}
}
func (m *NewsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsResponse.Unmarshal(m, b)
}
func (m *NewsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsResponse.Marshal(b, m, deterministic)
}
func (m *NewsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsResponse.Merge(m, src)
}
func (m *NewsResponse) XXX_Size() int {
	return xxx_messageInfo_NewsResponse.Size(m)
}
func (m *NewsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewsResponse proto.InternalMessageInfo

func (m *NewsResponse) GetNews() []*News {
	if m != nil {
		return m.News
	}
	return nil
}

type News struct {
	NewsId               string   `protobuf:"bytes,1,opt,name=newsId,proto3" json:"newsId,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ImageUrl             string   `protobuf:"bytes,3,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Topic                Topic    `protobuf:"varint,5,opt,name=topic,proto3,enum=demo.Topic" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *News) Reset()         { *m = News{} }
func (m *News) String() string { return proto.CompactTextString(m) }
func (*News) ProtoMessage()    {}
func (*News) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac5cc3c062ad010, []int{3}
}
func (m *News) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_News.Unmarshal(m, b)
}
func (m *News) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_News.Marshal(b, m, deterministic)
}
func (m *News) XXX_Merge(src proto.Message) {
	xxx_messageInfo_News.Merge(m, src)
}
func (m *News) XXX_Size() int {
	return xxx_messageInfo_News.Size(m)
}
func (m *News) XXX_DiscardUnknown() {
	xxx_messageInfo_News.DiscardUnknown(m)
}

var xxx_messageInfo_News proto.InternalMessageInfo

func (m *News) GetNewsId() string {
	if m != nil {
		return m.NewsId
	}
	return ""
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *News) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *News) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_TECH
}

func init() {
	proto.RegisterType((*NewsRequest)(nil), "demo.NewsRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "demo.SubscribeRequest")
	proto.RegisterType((*NewsResponse)(nil), "demo.NewsResponse")
	proto.RegisterType((*News)(nil), "demo.News")
	proto.RegisterEnum("demo.Topic", Topic_name, Topic_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsServiceClient interface {
	GetNews(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (*NewsResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (NewsService_SubscribeClient, error)
	PostNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*News, error)
}

type newsServiceClient struct {
	cc *grpc.ClientConn
}

func NewNewsServiceClient(cc *grpc.ClientConn) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) GetNews(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/demo.NewsService/getNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (NewsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NewsService_serviceDesc.Streams[0], "/demo.NewsService/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &newsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewsService_SubscribeClient interface {
	Recv() (*News, error)
	grpc.ClientStream
}

type newsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *newsServiceSubscribeClient) Recv() (*News, error) {
	m := new(News)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newsServiceClient) PostNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*News, error) {
	out := new(News)
	err := c.cc.Invoke(ctx, "/demo.NewsService/postNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServiceServer is the server API for NewsService service.
type NewsServiceServer interface {
	GetNews(context.Context, *NewsRequest) (*NewsResponse, error)
	Subscribe(*SubscribeRequest, NewsService_SubscribeServer) error
	PostNews(context.Context, *News) (*News, error)
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.NewsService/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNews(ctx, req.(*NewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewsServiceServer).Subscribe(m, &newsServiceSubscribeServer{stream})
}

type NewsService_SubscribeServer interface {
	Send(*News) error
	grpc.ServerStream
}

type newsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *newsServiceSubscribeServer) Send(m *News) error {
	return x.ServerStream.SendMsg(m)
}

func _NewsService_PostNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(News)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).PostNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.NewsService/PostNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).PostNews(ctx, req.(*News))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getNews",
			Handler:    _NewsService_GetNews_Handler,
		},
		{
			MethodName: "postNews",
			Handler:    _NewsService_PostNews_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _NewsService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "news_service.proto",
}

func init() { proto.RegisterFile("news_service.proto", fileDescriptor_8ac5cc3c062ad010) }

var fileDescriptor_8ac5cc3c062ad010 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x6b, 0xea, 0x40,
	0x14, 0xc5, 0x1d, 0x4d, 0xfc, 0x73, 0xf3, 0x78, 0xe4, 0x5d, 0xde, 0x93, 0xe0, 0xe2, 0x61, 0x43,
	0x17, 0xb6, 0x85, 0x20, 0x91, 0x7e, 0x01, 0x45, 0x68, 0x17, 0x55, 0x89, 0x76, 0xd1, 0x55, 0x31,
	0xc9, 0x55, 0x02, 0x9a, 0xa4, 0x33, 0x63, 0xfd, 0x24, 0xdd, 0xf5, 0xc3, 0x96, 0x99, 0xe9, 0x9f,
	0xb4, 0xd0, 0x45, 0x97, 0xe7, 0xdc, 0x33, 0x33, 0xf7, 0xfc, 0x18, 0xc0, 0x9c, 0x8e, 0xe2, 0x5e,
	0x10, 0x7f, 0xcc, 0x12, 0x0a, 0x4a, 0x5e, 0xc8, 0x02, 0xad, 0x94, 0xf6, 0x85, 0x3f, 0x04, 0x67,
	0x46, 0x47, 0x11, 0xd1, 0xc3, 0x81, 0x84, 0xc4, 0x13, 0xb0, 0x65, 0x51, 0x66, 0x89, 0xc7, 0xfa,
	0x6c, 0xf0, 0x3b, 0x74, 0x02, 0x15, 0x0a, 0x56, 0xca, 0x8a, 0xcc, 0xc4, 0xbf, 0x04, 0x77, 0x79,
	0x88, 0x45, 0xc2, 0xb3, 0x98, 0x7e, 0x70, 0x2c, 0x80, 0x5f, 0xe6, 0x21, 0x51, 0x16, 0xb9, 0x20,
	0xfc, 0x0f, 0x96, 0x5a, 0xca, 0x63, 0xfd, 0xc6, 0xc0, 0x09, 0xc1, 0x9c, 0xd0, 0x09, 0xed, 0xfb,
	0x4f, 0x0c, 0x2c, 0x25, 0xb1, 0x0b, 0x4d, 0x65, 0x5c, 0xa7, 0xfa, 0xf2, 0x4e, 0xf4, 0xaa, 0xf0,
	0x2f, 0xd8, 0x32, 0x93, 0x3b, 0xf2, 0xea, 0xda, 0x36, 0x02, 0x7b, 0xd0, 0xce, 0xf6, 0xeb, 0x2d,
	0xdd, 0xf2, 0x9d, 0xd7, 0xd0, 0x83, 0x77, 0x8d, 0x7d, 0x70, 0x52, 0x52, 0x8b, 0x97, 0x32, 0x2b,
	0x72, 0xcf, 0xd2, 0xe3, 0xaa, 0xf5, 0xd1, 0xc3, 0xfe, 0xae, 0xc7, 0xf9, 0x19, 0xd8, 0x5a, 0x63,
	0x1b, 0xac, 0xd5, 0x74, 0x72, 0xe5, 0xd6, 0xb0, 0x03, 0xf6, 0x72, 0x31, 0x8f, 0x56, 0x2e, 0x43,
	0x07, 0x5a, 0xd3, 0xc9, 0x7c, 0x36, 0xbf, 0xb9, 0x73, 0xeb, 0xe1, 0x33, 0x33, 0x70, 0x97, 0x86,
	0x3b, 0x86, 0xd0, 0xda, 0x92, 0xd4, 0xa5, 0xfe, 0x54, 0xfa, 0x1a, 0x86, 0x3d, 0xac, 0x5a, 0x06,
	0x92, 0x5f, 0xc3, 0x11, 0x74, 0xc4, 0x1b, 0x6d, 0xec, 0x9a, 0xc8, 0x57, 0xfc, 0xbd, 0x0a, 0x3d,
	0xbf, 0x36, 0x64, 0x78, 0x0a, 0xed, 0xb2, 0x10, 0xe6, 0xa5, 0xca, 0xec, 0x73, 0x6e, 0x7c, 0x01,
	0xff, 0x36, 0x3c, 0xd8, 0xc4, 0xc4, 0xf3, 0x35, 0x4f, 0x83, 0x2d, 0x2f, 0x93, 0x40, 0xb1, 0x1d,
	0xbb, 0x95, 0xa5, 0x17, 0xea, 0xaf, 0x2c, 0x58, 0xdc, 0xd4, 0x9f, 0x66, 0xf4, 0x12, 0x00, 0x00,
	0xff, 0xff, 0x3f, 0x52, 0x2d, 0xd6, 0x4a, 0x02, 0x00, 0x00,
}
